<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.neu.hospital.dao.basicTableDao.InspectionFeeDao">
  <resultMap id="BaseResultMap" type="edu.neu.hospital.bean.basicTableBean.InspectionFee">
    <result column="medicalRecordID" jdbcType="INTEGER" property="medicalRecordID" />
    <result column="doctorID" jdbcType="INTEGER" property="doctorID" />
    <result column="inspectiondetailsID" jdbcType="INTEGER" property="inspectiondetailsID" />
    <result column="InspectionID" jdbcType="INTEGER" property="inspectionID" />
    <result column="FmedItemID" jdbcType="INTEGER" property="fmedItemID" />
    <result column="number" jdbcType="INTEGER" property="number" />
    <result column="isDrawn" jdbcType="INTEGER" property="isDrawn" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="expClassID" jdbcType="INTEGER" property="expClassID" />
    <result column="paymentCategoryID" jdbcType="INTEGER" property="paymentCategoryID" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    medicalRecordID, doctorID, inspectiondetailsID, InspectionID, FmedItemID, `number`, 
    isDrawn, price, expClassID, paymentCategoryID
  </sql>
  <select id="selectByExample" parameterType="edu.neu.hospital.example.basicTableExample.InspectionFeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from inspectionfee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <delete id="deleteByExample" parameterType="edu.neu.hospital.example.basicTableExample.InspectionFeeExample">
    delete from inspectionfee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="edu.neu.hospital.bean.basicTableBean.InspectionFee">
    insert into inspectionfee (medicalRecordID, doctorID, inspectiondetailsID, 
      InspectionID, FmedItemID, `number`, 
      isDrawn, price, expClassID, 
      paymentCategoryID)
    values (#{medicalRecordID,jdbcType=INTEGER}, #{doctorID,jdbcType=INTEGER}, #{inspectiondetailsID,jdbcType=INTEGER}, 
      #{inspectionID,jdbcType=INTEGER}, #{fmedItemID,jdbcType=INTEGER}, #{number,jdbcType=INTEGER}, 
      #{isDrawn,jdbcType=INTEGER}, #{price,jdbcType=DECIMAL}, #{expClassID,jdbcType=INTEGER}, 
      #{paymentCategoryID,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="edu.neu.hospital.bean.basicTableBean.InspectionFee">
    insert into inspectionfee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="medicalRecordID != null">
        medicalRecordID,
      </if>
      <if test="doctorID != null">
        doctorID,
      </if>
      <if test="inspectiondetailsID != null">
        inspectiondetailsID,
      </if>
      <if test="inspectionID != null">
        InspectionID,
      </if>
      <if test="fmedItemID != null">
        FmedItemID,
      </if>
      <if test="number != null">
        `number`,
      </if>
      <if test="isDrawn != null">
        isDrawn,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="expClassID != null">
        expClassID,
      </if>
      <if test="paymentCategoryID != null">
        paymentCategoryID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="medicalRecordID != null">
        #{medicalRecordID,jdbcType=INTEGER},
      </if>
      <if test="doctorID != null">
        #{doctorID,jdbcType=INTEGER},
      </if>
      <if test="inspectiondetailsID != null">
        #{inspectiondetailsID,jdbcType=INTEGER},
      </if>
      <if test="inspectionID != null">
        #{inspectionID,jdbcType=INTEGER},
      </if>
      <if test="fmedItemID != null">
        #{fmedItemID,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="isDrawn != null">
        #{isDrawn,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="expClassID != null">
        #{expClassID,jdbcType=INTEGER},
      </if>
      <if test="paymentCategoryID != null">
        #{paymentCategoryID,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.neu.hospital.example.basicTableExample.InspectionFeeExample" resultType="java.lang.Long">
    select count(*) from inspectionfee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update inspectionfee
    <set>
      <if test="record.medicalRecordID != null">
        medicalRecordID = #{record.medicalRecordID,jdbcType=INTEGER},
      </if>
      <if test="record.doctorID != null">
        doctorID = #{record.doctorID,jdbcType=INTEGER},
      </if>
      <if test="record.inspectiondetailsID != null">
        inspectiondetailsID = #{record.inspectiondetailsID,jdbcType=INTEGER},
      </if>
      <if test="record.inspectionID != null">
        InspectionID = #{record.inspectionID,jdbcType=INTEGER},
      </if>
      <if test="record.fmedItemID != null">
        FmedItemID = #{record.fmedItemID,jdbcType=INTEGER},
      </if>
      <if test="record.number != null">
        `number` = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.isDrawn != null">
        isDrawn = #{record.isDrawn,jdbcType=INTEGER},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.expClassID != null">
        expClassID = #{record.expClassID,jdbcType=INTEGER},
      </if>
      <if test="record.paymentCategoryID != null">
        paymentCategoryID = #{record.paymentCategoryID,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update inspectionfee
    set medicalRecordID = #{record.medicalRecordID,jdbcType=INTEGER},
      doctorID = #{record.doctorID,jdbcType=INTEGER},
      inspectiondetailsID = #{record.inspectiondetailsID,jdbcType=INTEGER},
      InspectionID = #{record.inspectionID,jdbcType=INTEGER},
      FmedItemID = #{record.fmedItemID,jdbcType=INTEGER},
      `number` = #{record.number,jdbcType=INTEGER},
      isDrawn = #{record.isDrawn,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL},
      expClassID = #{record.expClassID,jdbcType=INTEGER},
      paymentCategoryID = #{record.paymentCategoryID,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>
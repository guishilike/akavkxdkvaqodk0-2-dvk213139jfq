<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.neu.hospital.dao.basicTableDao.FeeDao">
  <resultMap id="BaseResultMap" type="edu.neu.hospital.bean.basicTableBean.Fee">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="medicalRecordID" jdbcType="INTEGER" property="medicalRecordID" />
    <result column="feeCategoryID" jdbcType="INTEGER" property="feeCategoryID" />
    <result column="chargeItemID" jdbcType="INTEGER" property="chargeItemID" />
    <result column="expID" jdbcType="INTEGER" property="expID" />
    <result column="fee" jdbcType="DECIMAL" property="fee" />
    <result column="tollManID" jdbcType="INTEGER" property="tollManID" />
    <result column="tollDate" jdbcType="TIMESTAMP" property="tollDate" />
    <result column="appearUserID" jdbcType="INTEGER" property="appearUserID" />
    <result column="changeUserID" jdbcType="INTEGER" property="changeUserID" />
    <result column="feeAppearDate" jdbcType="TIMESTAMP" property="feeAppearDate" />
    <result column="feeChangeDate" jdbcType="TIMESTAMP" property="feeChangeDate" />
    <result column="payStatus" jdbcType="INTEGER" property="payStatus" />
    <result column="dateStatus" jdbcType="INTEGER" property="dateStatus" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="reserve1" jdbcType="VARCHAR" property="reserve1" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, medicalRecordID, feeCategoryID, chargeItemID, expID, fee, tollManID, tollDate, 
    appearUserID, changeUserID, feeAppearDate, feeChangeDate, payStatus, dateStatus, 
    `status`, reserve1
  </sql>
  <select id="selectByExample" parameterType="edu.neu.hospital.example.basicTableExample.FeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from fee
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from fee
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="edu.neu.hospital.example.basicTableExample.FeeExample">
    delete from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="edu.neu.hospital.bean.basicTableBean.Fee" useGeneratedKeys="true">
    insert into fee (medicalRecordID, feeCategoryID, chargeItemID, 
      expID, fee, tollManID, 
      tollDate, appearUserID, changeUserID, 
      feeAppearDate, feeChangeDate, payStatus, 
      dateStatus, `status`, reserve1
      )
    values (#{medicalRecordID,jdbcType=INTEGER}, #{feeCategoryID,jdbcType=INTEGER}, #{chargeItemID,jdbcType=INTEGER}, 
      #{expID,jdbcType=INTEGER}, #{fee,jdbcType=DECIMAL}, #{tollManID,jdbcType=INTEGER}, 
      #{tollDate,jdbcType=TIMESTAMP}, #{appearUserID,jdbcType=INTEGER}, #{changeUserID,jdbcType=INTEGER}, 
      #{feeAppearDate,jdbcType=TIMESTAMP}, #{feeChangeDate,jdbcType=TIMESTAMP}, #{payStatus,jdbcType=INTEGER}, 
      #{dateStatus,jdbcType=INTEGER}, #{status,jdbcType=CHAR}, #{reserve1,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="edu.neu.hospital.bean.basicTableBean.Fee" useGeneratedKeys="true">
    insert into fee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="medicalRecordID != null">
        medicalRecordID,
      </if>
      <if test="feeCategoryID != null">
        feeCategoryID,
      </if>
      <if test="chargeItemID != null">
        chargeItemID,
      </if>
      <if test="expID != null">
        expID,
      </if>
      <if test="fee != null">
        fee,
      </if>
      <if test="tollManID != null">
        tollManID,
      </if>
      <if test="tollDate != null">
        tollDate,
      </if>
      <if test="appearUserID != null">
        appearUserID,
      </if>
      <if test="changeUserID != null">
        changeUserID,
      </if>
      <if test="feeAppearDate != null">
        feeAppearDate,
      </if>
      <if test="feeChangeDate != null">
        feeChangeDate,
      </if>
      <if test="payStatus != null">
        payStatus,
      </if>
      <if test="dateStatus != null">
        dateStatus,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="reserve1 != null">
        reserve1,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="medicalRecordID != null">
        #{medicalRecordID,jdbcType=INTEGER},
      </if>
      <if test="feeCategoryID != null">
        #{feeCategoryID,jdbcType=INTEGER},
      </if>
      <if test="chargeItemID != null">
        #{chargeItemID,jdbcType=INTEGER},
      </if>
      <if test="expID != null">
        #{expID,jdbcType=INTEGER},
      </if>
      <if test="fee != null">
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="tollManID != null">
        #{tollManID,jdbcType=INTEGER},
      </if>
      <if test="tollDate != null">
        #{tollDate,jdbcType=TIMESTAMP},
      </if>
      <if test="appearUserID != null">
        #{appearUserID,jdbcType=INTEGER},
      </if>
      <if test="changeUserID != null">
        #{changeUserID,jdbcType=INTEGER},
      </if>
      <if test="feeAppearDate != null">
        #{feeAppearDate,jdbcType=TIMESTAMP},
      </if>
      <if test="feeChangeDate != null">
        #{feeChangeDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null">
        #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="dateStatus != null">
        #{dateStatus,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      <if test="reserve1 != null">
        #{reserve1,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.neu.hospital.example.basicTableExample.FeeExample" resultType="java.lang.Long">
    select count(*) from fee
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update fee
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.medicalRecordID != null">
        medicalRecordID = #{record.medicalRecordID,jdbcType=INTEGER},
      </if>
      <if test="record.feeCategoryID != null">
        feeCategoryID = #{record.feeCategoryID,jdbcType=INTEGER},
      </if>
      <if test="record.chargeItemID != null">
        chargeItemID = #{record.chargeItemID,jdbcType=INTEGER},
      </if>
      <if test="record.expID != null">
        expID = #{record.expID,jdbcType=INTEGER},
      </if>
      <if test="record.fee != null">
        fee = #{record.fee,jdbcType=DECIMAL},
      </if>
      <if test="record.tollManID != null">
        tollManID = #{record.tollManID,jdbcType=INTEGER},
      </if>
      <if test="record.tollDate != null">
        tollDate = #{record.tollDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.appearUserID != null">
        appearUserID = #{record.appearUserID,jdbcType=INTEGER},
      </if>
      <if test="record.changeUserID != null">
        changeUserID = #{record.changeUserID,jdbcType=INTEGER},
      </if>
      <if test="record.feeAppearDate != null">
        feeAppearDate = #{record.feeAppearDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.feeChangeDate != null">
        feeChangeDate = #{record.feeChangeDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payStatus != null">
        payStatus = #{record.payStatus,jdbcType=INTEGER},
      </if>
      <if test="record.dateStatus != null">
        dateStatus = #{record.dateStatus,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.reserve1 != null">
        reserve1 = #{record.reserve1,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update fee
    set id = #{record.id,jdbcType=INTEGER},
      medicalRecordID = #{record.medicalRecordID,jdbcType=INTEGER},
      feeCategoryID = #{record.feeCategoryID,jdbcType=INTEGER},
      chargeItemID = #{record.chargeItemID,jdbcType=INTEGER},
      expID = #{record.expID,jdbcType=INTEGER},
      fee = #{record.fee,jdbcType=DECIMAL},
      tollManID = #{record.tollManID,jdbcType=INTEGER},
      tollDate = #{record.tollDate,jdbcType=TIMESTAMP},
      appearUserID = #{record.appearUserID,jdbcType=INTEGER},
      changeUserID = #{record.changeUserID,jdbcType=INTEGER},
      feeAppearDate = #{record.feeAppearDate,jdbcType=TIMESTAMP},
      feeChangeDate = #{record.feeChangeDate,jdbcType=TIMESTAMP},
      payStatus = #{record.payStatus,jdbcType=INTEGER},
      dateStatus = #{record.dateStatus,jdbcType=INTEGER},
      `status` = #{record.status,jdbcType=CHAR},
      reserve1 = #{record.reserve1,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.neu.hospital.bean.basicTableBean.Fee">
    update fee
    <set>
      <if test="medicalRecordID != null">
        medicalRecordID = #{medicalRecordID,jdbcType=INTEGER},
      </if>
      <if test="feeCategoryID != null">
        feeCategoryID = #{feeCategoryID,jdbcType=INTEGER},
      </if>
      <if test="chargeItemID != null">
        chargeItemID = #{chargeItemID,jdbcType=INTEGER},
      </if>
      <if test="expID != null">
        expID = #{expID,jdbcType=INTEGER},
      </if>
      <if test="fee != null">
        fee = #{fee,jdbcType=DECIMAL},
      </if>
      <if test="tollManID != null">
        tollManID = #{tollManID,jdbcType=INTEGER},
      </if>
      <if test="tollDate != null">
        tollDate = #{tollDate,jdbcType=TIMESTAMP},
      </if>
      <if test="appearUserID != null">
        appearUserID = #{appearUserID,jdbcType=INTEGER},
      </if>
      <if test="changeUserID != null">
        changeUserID = #{changeUserID,jdbcType=INTEGER},
      </if>
      <if test="feeAppearDate != null">
        feeAppearDate = #{feeAppearDate,jdbcType=TIMESTAMP},
      </if>
      <if test="feeChangeDate != null">
        feeChangeDate = #{feeChangeDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payStatus != null">
        payStatus = #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="dateStatus != null">
        dateStatus = #{dateStatus,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=CHAR},
      </if>
      <if test="reserve1 != null">
        reserve1 = #{reserve1,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.neu.hospital.bean.basicTableBean.Fee">
    update fee
    set medicalRecordID = #{medicalRecordID,jdbcType=INTEGER},
      feeCategoryID = #{feeCategoryID,jdbcType=INTEGER},
      chargeItemID = #{chargeItemID,jdbcType=INTEGER},
      expID = #{expID,jdbcType=INTEGER},
      fee = #{fee,jdbcType=DECIMAL},
      tollManID = #{tollManID,jdbcType=INTEGER},
      tollDate = #{tollDate,jdbcType=TIMESTAMP},
      appearUserID = #{appearUserID,jdbcType=INTEGER},
      changeUserID = #{changeUserID,jdbcType=INTEGER},
      feeAppearDate = #{feeAppearDate,jdbcType=TIMESTAMP},
      feeChangeDate = #{feeChangeDate,jdbcType=TIMESTAMP},
      payStatus = #{payStatus,jdbcType=INTEGER},
      dateStatus = #{dateStatus,jdbcType=INTEGER},
      `status` = #{status,jdbcType=CHAR},
      reserve1 = #{reserve1,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>